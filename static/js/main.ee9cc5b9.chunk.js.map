{"version":3,"sources":["Comment.js","Post.js","PostList.js","api/GetDataFromServer.js","Main.js","App.js","index.js"],"names":["Comment","_ref","comment","react_default","a","createElement","className","name","email","body","Post","ownpost","Fragment","title","user","address","street","suite","city","zipcode","geo","lat","lng","comments","map","src_Comment","key","id","PostList","posts","post","src_Post","getDataFromServer","URL","fetch","then","dataList","json","Main","_useState","useState","_useState2","Object","slicedToArray","setPosts","_useState3","_useState4","isLoaded","setIsLoaded","_useState5","_useState6","loading","setIsLoading","_useState7","_useState8","textInput","setTextInput","_useState9","_useState10","originalPost","setOriginalPost","inputText","f","delay","timer","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","debounce","type","onClick","_ref2","allUsers","allComments","allPosts","unitedPost","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","objectSpread2","find","userId","filter","commentId","postId","stop","filteredPost","includes","JSON","stringify","_unused","placeholder","onChange","event","target","value","src_PostList","App","src_Main","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ee9cc5b9.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Comment = ({ comment }) => (\n  <div>\n    <h3 className=\"headers\">\n      {comment.name}\n    </h3>\n    <p>\n      {comment.email}\n    </p>\n    <p>\n      {comment.body}\n    </p>\n  </div>\n);\n\nComment.propTypes = { comment: PropTypes.objectOf(PropTypes.any).isRequired };\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Comment from './Comment';\n\nconst Post = ({ ownpost }) => (\n  <>\n    <section className=\"post\">\n      <h1 className=\"post__title\">\n        {ownpost.title}\n      </h1>\n      <p className=\"post__text\">\n        {ownpost.body}\n      </p>\n    </section>\n    <section className=\"userSection\">\n      {ownpost.user.name}\n      <br />\n      {ownpost.user.email}\n      <br />\n      {ownpost.user.address.street}\n      {ownpost.user.address.suite}\n      {ownpost.user.address.city}\n      {ownpost.user.address.zipcode}\n      {ownpost.user.address.geo.lat}\n      {ownpost.user.address.geo.lng}\n    </section>\n    <section className=\"commentSection\">\n      {\n        ownpost.comments.map(comment => (\n          <Comment key={comment.id} comment={comment} />))\n      }\n    </section>\n  </>\n);\n\nPost.propTypes = { ownpost: PropTypes.objectOf(PropTypes.any).isRequired };\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <section className=\"post-list\">\n    { posts.map(post => (\n      <div key={post.id} className=\"allPost\">\n        <Post ownpost={post} />\n      </div>\n    ))}\n  </section>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.any).isRequired };\n\nexport default PostList;\n","const getDataFromServer = URL => fetch(URL).then(dataList => dataList.json());\n\nexport default getDataFromServer;\n","import React, { useState } from 'react';\n\nimport PostList from './PostList';\nimport getDataFromServer from './api/GetDataFromServer';\n\nconst Main = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [loading, setIsLoading] = useState(false);\n  const [textInput, setTextInput] = useState('');\n  const [originalPost, setOriginalPost] = useState([]);\n\n  const loadPosts = async() => {\n    setIsLoading(true);\n    const [allUsers, allComments, allPosts]\n    = await Promise.all([\n      getDataFromServer('https://jsonplaceholder.typicode.com/users'),\n      getDataFromServer('https://jsonplaceholder.typicode.com/comments'),\n      getDataFromServer('https://jsonplaceholder.typicode.com/posts'),\n    ]);\n\n    setIsLoading(true);\n    const unitedPost = allPosts.map(post => ({\n      ...post,\n      user: allUsers.find(user => user.id === post.userId),\n      comments: allComments.filter(commentId => commentId.postId === post.id),\n    }));\n\n    setOriginalPost(unitedPost);\n    setPosts(unitedPost);\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  function debounce(f, delay) {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => f(...args), delay);\n    };\n  }\n\n  const inputText = debounce(setTextInput, 1000);\n\n  if (loading) {\n    return (\n      <p className=\"App\">...LOADING</p>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <section className=\"App\">\n        <button type=\"button\" onClick={loadPosts}>\n          Load\n        </button>\n      </section>\n    );\n  }\n\n  const filteredPost = originalPost.filter((post) => {\n    const postContent = post.title + post.body;\n\n    return postContent.includes(textInput);\n  });\n\n  if (JSON.stringify(filteredPost) !== JSON.stringify(posts)) {\n    try {\n      setPosts(filteredPost);\n    } catch {\n      setPosts([]);\n    }\n  }\n\n  return (\n    <section className=\"App\">\n      <input\n        id=\"text\"\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={event => inputText(event.target.value)}\n      />\n      <p>\n        {posts.length}\n        {' '}\n        posts found\n      </p>\n      <PostList posts={posts} />\n    </section>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nconst App = () => <Main />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}